{"version":3,"sources":["App.js","serviceWorker.js","index.js","quit.png"],"names":["SearchBar","props","className","type","value","UserInput","onChange","handleChange","onKeyPress","handleKeyPress","handleTaskExpansion","Task","task","onMouseLeave","id","onMouseEnter","onClick","handleItemCheckOff","src","quit","handleItemDeletion","TaskList","listTasks","tasks","map","index","key","length","App","state","userInput","bind","completed","t","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","getTasksAsync","data","setState","catch","error","console","log","json","this","event","target","taskText","preventDefault","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.e1e17269.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport quit from './quit.png'\n\nfunction SearchBar(props) {\n    return (\n\n    <div className=\"SearchBarContainer\">\n      <h1>TODO</h1>\n      <form >\n        <input className=\"SearchBar\" type=\"text\" value={props.UserInput} onChange={props.handleChange} onKeyPress={props.handleKeyPress} />\n      </form>\n\n    </div>\n    );\n};\n\n\nfunction handleTaskExpansion() {\n  // alert(\"taxk expanded\");\n}\n\nfunction handleTaskSimplify(id) {\n  // alert(\"task minimized\" + id);\n}\n\nfunction Task(props) {\n  // fetch task info\n\n\n  //{props.task[\"taskText\"]}\n  if( props.task[\"completed\"] !== true){\n\n    return(\n\n      <li onMouseLeave={() => handleTaskSimplify(props.id)} onMouseEnter={handleTaskExpansion} onClick={() => props.handleItemCheckOff(props.task[\"_id\"], props.task[\"completed\"])}>\n      {props.task[\"taskText\"]}\n      </li>\n\n    );\n  } else {\n\n    return(\n      <li className=\"CompletedTask\" onMouseLeave={() => handleTaskSimplify(props.id)} onMouseEnter={handleTaskExpansion} onClick={() => props.handleItemCheckOff(props.task[\"_id\"], props.task[\"completed\"])}>\n      {props.task[\"taskText\"]}\n      <img className=\"DeleteButton\" src={quit} onClick={() => props.handleItemDeletion(props.task[\"_id\"])}>\n      </img>\n\n      </li>\n    );\n\n  }\n\n}\n\n// delete button\n//<img className=\"DeleteButton\" src={quit} />\n\n\nfunction TaskList(props) {\n  const listTasks = props.tasks.map((task, index) =>\n  <Task task={task} key={index} id={index} handleItemCheckOff={props.handleItemCheckOff} handleItemDeletion={props.handleItemDeletion}/>\n  );\n\n  return(\n    <div className=\"TaskBoard\">\n      {props.tasks.length < 1 &&\n        <p> no tasks...</p>\n      }\n      <ul>{listTasks}</ul>\n\n    </div>\n  );\n\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: \"\",\n      tasks: []\n    }\n\n    // bind function\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleItemCheckOff = this.handleItemCheckOff.bind(this);\n    this.handleItemDeletion = this.handleItemDeletion.bind(this);\n\n  }\n\n  handleItemCheckOff(id, completed) {\n    var t = \"true\";\n    if(completed){\n      t = \"false\";\n    }\n    const requestOptions = {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify([{\"propName\":\"completed\", \"value\": t}])\n    };\n    fetch('https://event-maps-api.herokuapp.com/tasks/' + id, requestOptions)\n      .then(response => {\n        // update tasks list\n        this.getTasksAsync().then(data => {\n          this.setState({\n            tasks: data[\"tasks\"]\n          });\n        });\n\n      }\n      ).catch(error => console.log(\"error\"));\n\n  }\n\n  handleItemDeletion(id) {\n    const requestOptions = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    fetch('https://event-maps-api.herokuapp.com/tasks/' + id, requestOptions)\n      .then(response => response.json()).catch( error => console.log(error));\n\n    // update tasks list\n    this.getTasksAsync().then(data => {\n      this.setState({\n        tasks: data[\"tasks\"]\n      });\n    });\n\n  }\n\n  handleChange(event) {\n    this.setState({userInput: event.target.value});\n  }\n\n\n  // aka adding task to the list\n  handleKeyPress(event) {\n    if( event.key === \"Enter\" ) {\n\n      if(this.state.userInput !== \"\") {\n       // add task to database\n        const requestOptions = {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ taskText: this.state.userInput })\n        };\n        fetch('https://event-maps-api.herokuapp.com/tasks/', requestOptions)\n          .then(response => response.json()).catch( error => console.log(error));\n\n        // update tasks list\n        this.getTasksAsync().then(data => {\n          this.setState({\n            tasks: data[\"tasks\"]\n          });\n        });\n      }\n\n      event.preventDefault();\n    }\n  }\n\n  // get updated task list\n  async getTasksAsync()\n  {\n    const requestOptions = {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    };\n\n    var response = await fetch('https://event-maps-api.herokuapp.com/tasks/', requestOptions).catch( error => console.log(error));\n    var data = await response.json();\n    return data;\n  }\n\n  // fetch all tasks on startup\n  componentDidMount() {\n    this.getTasksAsync().then(data => {\n      this.setState({\n        tasks: data[\"tasks\"]\n      });\n    });\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <SearchBar userInput={this.state.userInput} handleChange={this.handleChange} handleKeyPress={this.handleKeyPress}/>\n        <TaskList tasks={this.state.tasks} handleItemCheckOff={this.handleItemCheckOff} handleItemDeletion={this.handleItemDeletion}/>\n      </div>\n    );\n\n  }\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/quit.dc8a2982.png\";"],"sourceRoot":""}